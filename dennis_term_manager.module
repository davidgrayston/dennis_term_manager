<?php

/**
 * @file
 * Module file Dennis Term Manager. 
 */
include_once 'dennis_term_manager_action_merge.inc';

define('DENNIS_TERM_MANAGER_ACTION_CREATE', 'create');
define('DENNIS_TERM_MANAGER_ACTION_DELETE', 'delete');
define('DENNIS_TERM_MANAGER_ACTION_MERGE', 'merge');
define('DENNIS_TERM_MANAGER_ACTION_RENAME', 'rename');
define('DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT', 'move parent');

/**
 * Implements hook_views_api().
 */
function dennis_term_manager_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'dennis_term_manager')
  );
}

/**
 * Implements hook_permission().
 */
function dennis_term_manager_permission() {
  return array(
    'administer dennis term manager' => array(
      'title' => t('Administer term manager'),
      'description' => t('Manage Dennis taxonomy terms CSV bulk operation'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dennis_term_manager_menu() {
  $items = array();
  $weight = 0;
  $items['admin/structure/taxonomy/term_manager'] = array(
    'title' => 'Term Manager',
    'description' => 'Manage bulk taxonomy term operation via CSV file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dennis_term_manager_form',
    ),
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );
  $items['admin/structure/taxonomy/term_manager/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => $weight++,
  );
  $items['admin/structure/taxonomy/term_manager/export_tsv'] = array(
    'title' => 'TSV Export',
    'description' => 'Download tab separated data',
    'page callback' => 'dennis_term_manager_export_terms',
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );
  $items['admin/structure/taxonomy/term_manager/export_csv'] = array(
    'title' => 'CSV Export',
    'description' => 'Download comma separated data',
    'page callback' => 'dennis_term_manager_export_terms',
    'page arguments' => array(','),
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );
  $items['admin/structure/taxonomy/term_manager/template_tsv'] = array(
    'title' => 'TSV Template',
    'description' => 'Download tab separated template',
    'page callback' => 'dennis_term_manager_download_template',
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );
  $items['admin/structure/taxonomy/term_manager/template_csv'] = array(
    'title' => 'CSV Template',
    'description' => 'Download comma separated template',
    'page callback' => 'dennis_term_manager_download_template',
    'page arguments' => array(','),
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => $weight++,
  );
  return $items;
}

/**
 * Download CSV/TSV template.
 */
function dennis_term_manager_download_template($delimiter = "\t") {
  // Send correct header to download file.
  $extension = $delimiter == ',' ? 'csv' : 'tsv';
  drupal_add_http_header('Content-Type', 'text/' . $extension . '; utf-8');
  $file_name = 'taxonomy_template_' . date('Y-m-d_H:i:s') . '.' . $extension;
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $file_name);

  $columns = dennis_term_manager_default_columns();
  $out = fopen('php://output', 'w');
  fputcsv($out, $columns, $delimiter, '"');
}

/**
 * Export current taxonomy.
 */
function dennis_term_manager_export_terms($delimiter = "\t") {
  $query = db_select('taxonomy_term_data', 't');

  // Term vocabulary and name.
  $query->addField('v', 'name', 'vocabulary_name');
  $query->addField('t', 'name', 'term_name');

  // Get node count for term.
  $query->addExpression('COUNT(DISTINCT i.nid)', 'node_count');

  // Parent term name.
  $query->addExpression('IF(p.name IS NULL, \'\', p.name)', 'parent_term');

  // Join on vocabulary of term.
  $query->leftJoin('taxonomy_vocabulary', 'v', 'v.vid = t.vid');

  // Join taxonomy_index to get node usage.
  $query->leftJoin('taxonomy_index', 'i', 'i.tid = t.tid');

  // Parent information.
  $query->leftJoin('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
  $query->leftJoin('taxonomy_term_data', 'p', 'p.tid = h.parent');

  // Group by tid to get node counts for each term.
  $query->groupBy('t.tid');

  // Sort results by vocabulary, then by name.
  $query->orderBy('t.vid', 'ASC');
  $query->orderBy('t.name', 'ASC');

  $result = $query->execute();

  // Send correct header to download file.
  $extension = $delimiter == ',' ? 'csv' : 'tsv';
  drupal_add_http_header('Content-Type', 'text/' . $extension . '; utf-8');
  $file_name = 'taxonomy_export_' . date('Y-m-d_H:i:s') . '.' . $extension;
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $file_name);

  // Add default CSV/TSV headings.
  $columns = dennis_term_manager_default_columns();
  $out = fopen('php://output', 'w');
  fputcsv($out, $columns, $delimiter, '"');

  while ($row = $result->fetchObject()) {
    // Add report data to corresponding column.
    $row_data = array();
    foreach ($columns as $column) {
      $row_data[] = isset($row->{$column}) ? $row->{$column} : '';
    }
    fputcsv($out, $row_data, $delimiter, '"');
  }
}

/**
 * Implements hook_help().
 */
function dennis_term_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/taxonomy/term_manager':
    case 'admin/help#dennis_term_manager':
      $output = '';
      $output .= '<div class="import-notes">';
      $output .= '<span>' . t('Make sure the file is in CSV or TSV format with the following headings.') . '</span>';
      $output .= '<table><tr>';
      $output .= '<td>' . implode('</td><td>', dennis_term_manager_default_columns()) . '</td>';
      $output .= '</tr></table>';
      $output .= '</div>';
      return $output;
  }
}

/**
 * Dennis Term Manager Form.
 */
function dennis_term_manager_form($form, &$form_state) {
  $form = array();

  // @todo : change storage to private.
  $form['csv_file'] = array(
    '#title' => t('Import'),
    '#type' => 'managed_file',
    '#description' => t('The CSV file to be processed.'),
    '#upload_validators' => array('file_validate_extensions' => array('csv tsv')),
    '#upload_location' => 'public://',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#suffix' => '<span> ' . t('Click the "Upload" button to process the file.') . '</span>',
  );
  $form['from'] = array(
    '#type' => 'item',
    '#prefix' => '<div><br /></div>',
    '#title' => t('Reports'),
    '#markup' => views_embed_view('csv_report'),
  );

  return $form;
}

/**
 * Implements hook_views_pre_render().
 *
 * Modify the filename and file uri accordingly to generated file.
 */
function dennis_term_manager_views_pre_render(&$view) {
  if ($view->name == 'csv_report') {
    foreach ($view->result as $result) {
      $report_file_name = preg_replace("/[.](.*)/", ".txt", $result->file_managed_filename);
      $report_file_uri = preg_replace("/[.](.*)/", ".txt", $result->file_managed_uri);
      $result->file_managed_filename = $report_file_name;
      $result->file_managed_uri = $report_file_uri;
    }
  }
}

/**
 * Callback function for form submission.
 *
 * @param object $form
 *   Form Object
 * @param object $form_state
 *   Form State
 */
function dennis_term_manager_form_submit(&$form, &$form_state) {
  // Load the file.
  $file = file_load($form_state['values']['csv_file']);
  if (!$file) {
    drupal_set_message(t('file not found'));
  }
  else {
    // Add file usage.
    file_usage_add($file, 'dennis_term_manager', 'dennis_term_manager_csv_file', 1);

    // Set initial counter for debug information.
    $_SESSION['http_request_count'] = 0;

    // Process the file.
    $batch = _dennis_term_manager_batch_init($file->uri);
    batch_set($batch);
  }
}

/**
 * Prepare a batch definition that will process the file rows.
 */
function _dennis_term_manager_batch_init($uri) {
  $limit = 100;
  $file_path = drupal_realpath($uri);
  $fp = file($file_path);
  $total_lines = count($fp);
  $num_operations = ceil($total_lines / $limit);

  $operations = array();
  for ($i = 0; $i < $num_operations; $i++) {

    // Start first batch from 0.
    if ($i == 0) {
      $start = 0;
    }
    else {
      $start = ($limit * $i) + 1;
    }

    $end = $start + $limit;

    $options = array(
      'file_path' => $file_path,
      'start' => $start,
      'end' => $end,
    );

    $operations[] = array(
      'dennis_term_manager_csv_process',
      array($options),
    );
  }

  $batch = array(
    'operations' => $operations,
    //'finished' => 'batch_dennis_term_manager_finished',
    'title' => t('Processing your file'),
    'init_message' => t('File process is starting.'),
    'progress_message' => t('Processed @current out of @total steps, splited for @count_rows rows.', array('@count_rows' => $total_lines - 1)),
    'error_message' => t('Batch has encountered an error.'),
  );

  return $batch;
}

/**
 * Process csv file and pass each row to cron queue.
 *
 * @param: $uri
 *   URL of CSV file
 */
function dennis_term_manager_csv_process($options, &$context) {
  global $user;

  $file_path = $options['file_path'];
  $start = $options['start'];
  $end = $options['end'];

  // Get current logged in user id.
  $user_id = $user->uid ? $user->uid : '';
  // Get the que to handle the.
  $q = DrupalQueue::get('dennis_term_manager_queue');

  if (file_exists($file_path)) {

    // Get file extension.
    $file_info = pathinfo($file_path);
    $delimiter = $file_info['extension'] == 'csv' ? ',' : "\t";

    // Detect line endings.
    ini_set('auto_detect_line_endings',TRUE);

    // Set initial batch parameters.
    if (empty($context['sandbox'])) {
      $context['sandbox'] = array();
      $context['sandbox']['progress'] = 0;
      $context['sandbox']['http_requests_count'] = 0;
    }

    // Get the file content.
    if (($handle = fopen($file_path, "r")) !== FALSE) {

      // Create file for reporting error.
      // Use the same file name and change extenstion.
      $report_file_name = preg_replace("/[.](.*)/", ".txt", $file_path);

      if (($report_handle = fopen($report_file_name, "w")) !== FALSE) {
        // Get columns mapping.
        // - This will also move the file pointer to the second row.
        $heading_row = fgetcsv($handle, 1000, $delimiter);
        $columns = array_flip($heading_row);

        while (($data = fgetcsv($handle, 1000, $delimiter)) !== FALSE) {
          // Go to the last processed line.
          // We need to skip this way because fgetcsv() works only inside while.
          $processed_items = $context['sandbox']['progress'];
          $context['sandbox']['progress']++;

          if ($start <= $processed_items && $processed_items < $end) {
            // Good for processing.
          }
          else {
            // Skip already prcessed rows.
            continue 1;
          }

          // Array containing parameters from the CSV.
          $parameters = array();
          foreach (dennis_term_manager_default_columns() as $column) {
            $parameters[$column] = isset($data[$columns[$column]]) ? $data[$columns[$column]] : "";
          }
          $parameters['row'] = $context['sandbox']['progress'];
          $parameters['user_id'] = $user_id;

          $data = array(
            'action' => $parameters['action'],
            'row' => $parameters['row'],
            'uid' => $user_id,
            'report_filename' => $report_file_name,
          );

          if ($vocabulary = _dennis_term_manager_get_vocabulary($parameters['vocabulary_name'])) {
            $data['vocabulary_id'] = $vocabulary->vid;
            if ($parameters['action'] != DENNIS_TERM_MANAGER_ACTION_CREATE) {
              // Get source tid.
              if ($source_tid = _dennis_term_manager_get_tid($parameters['term_name'], $vocabulary->machine_name)) {
                $data['source_tid'] = $source_tid;
              }
              else {
                drupal_set_message(t("Source term '@term_name' does not exist in vocabulary '@vocab'", array(
                  '@term_name' => $parameters['term_name'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 1;
              }
            }
            // Parse target term name.
            $target_term_name = '';
            preg_match("/>->[ ]?+(.*)/", decode_entities($parameters['target']), $matches);
            if (isset($matches[1])) {
              $target_term_name = $matches[1];
            }
          }
          else {
            drupal_set_message(t("There is no vocabulary @vocab exists in row @row", array(
              '@row' => $parameters['row'],
              '@vocab' => $parameters['vocabulary_name'],
            )));
            continue 1;
          }

          switch ($parameters['action']) {
            case DENNIS_TERM_MANAGER_ACTION_MERGE:
              // Get Target tid.
              if ($target_tid = _dennis_term_manager_get_tid($target_term_name, $vocabulary->machine_name)) {
                $data['target_tid'] = $target_tid;
              }
              else {
                drupal_set_message(t("Target term '@target' does not exist in vocabulary '@vocab'", array(
                  '@target' => $parameters['target'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 2;
              }

              // Store the original source tid in order to reset it after.
              $original_source_tid = $data['source_tid'];

              // Get all nodes with target term reference.
              $nodes = _dennis_term_manager_get_associated_nodes($target_tid);
              if (!empty($nodes)) {
                // Find all child terms of target term.
                $children = taxonomy_get_children($target_tid);
                if (!empty($children)) {
                  foreach ($children as $child) {
                    // Change parent of each child term to source term.
                    $data['source_tid'] = $child->tid;
                    $data['action'] = DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT;
                    // Push each "merge move parent" action into the queue.
                    $q->createItem($data);
                  }
                }
              }
              // Reset action and source_tid.
              $data['action'] = DENNIS_TERM_MANAGER_ACTION_MERGE;
              $data['source_tid'] = $original_source_tid;
              // Create queue for each node.
              foreach ($nodes as $node) {
                $data['nid'] = $node->nid;
                // Queue item for Merge action.
                $q->createItem($data);
              }
              unset($data['nid']);
              // Change action to delete after Pushing nodes into the queue.
              $data['action'] = DENNIS_TERM_MANAGER_ACTION_DELETE;
              $data['term_name'] = $target_term_name;
              $data['source_tid'] = $target_tid;
              break;

            case DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT:
              $data['parent_term'] = $parameters['parent_term'];
              // Get Target tid.
              if ($target_tid = _dennis_term_manager_get_tid($parameters['parent_term'], $vocabulary->machine_name)) {
                $data['target_tid'] = $target_tid;
              }
              else {
                // Make term a root item.
                $data['target_tid'] = 0;
              }
              // Validate parent term if it is not child or source term.
              if (!_dennis_term_manager_term_is_parent($data['target_tid'], $data['source_tid'])) {
                drupal_set_message(t("Parent can not be moved. Because Term @parent_term is child of source term @term_name", array(
                  '@parent_term' => $data['parent_term'],
                  '@term_name' => $parameters['term_name'],
                )));
              }
              break;

            case DENNIS_TERM_MANAGER_ACTION_CREATE:
              // If parent term is specidied, check if this term exist.
              $parent_term = _dennis_term_manager_get_tid($parameters['parent_term'], $vocabulary->machine_name);
              if ($parameters['parent_term'] && empty($parent_term)) {
                drupal_set_message(t("Parent term '@parent_term' does not exist in vocabulary '@vocab' in row @row", array(
                  '@parent_term' => $parameters['parent_term'],
                  '@vocab' => $parameters['vocabulary_name'],
                  '@row' => $data['row'],
                )));
                continue 2;
              }

              $data['parent_term'] = $parameters['parent_term'];
              $data['term_name'] = $parameters['term_name'];
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              break;

            case DENNIS_TERM_MANAGER_ACTION_DELETE:
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              $data['term_name'] = $parameters['term_name'];
              break;

            case DENNIS_TERM_MANAGER_ACTION_RENAME:
              $data['term_name'] = $parameters['term_name'];
              $data['new_name'] = $parameters['new_name'];
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              break;

            default:
              continue 2;
          }
          $q->createItem($data);
        }
      }
      else {
        drupal_set_message('report file cannot be created');
      }
    }
    fclose($handle);
  }
  else {
    drupal_set_message(t("File not found @file", array(
      '@file' => $file_path,
    )));
  }

  // Increase this session http requests.
  $context['sandbox']['http_requests_count']++;
}

/**
 * Implements hook_cron_queue_info().
 */
function dennis_term_manager_cron_queue_info() {
  $queues['dennis_term_manager_queue'] = array(
    'worker callback' => 'dennis_term_manager_process_queue_item',
    'time' => 60,
  );
  return $queues;
}

/**
 * Process the queue of terms, if any. Does what drupal_cron_run() does.
 *
 * @see drupal_cron_run()
 * 
 * @param int $max_time
 *   No of seconds
 */
function dennis_term_manager_process_queue($max_time = 15) {
  $end = time() + $max_time;
  $queue = DrupalQueue::get('dennis_term_manager_queue');
  while (time() < $end && ($item = $queue->claimItem())) {
    dennis_term_manager_process_queue_item($item->data);
    $queue->deleteItem($item);
  }
}

/**
 * Perform action on each queue item.
 * 
 * @param array $data
 *   An array containing source and target taxonomy term data
 *   
 */
function dennis_term_manager_process_queue_item($data) {
  // Process each row against their action column and validate their data.
  switch (strtolower($data['action'])) {
    case DENNIS_TERM_MANAGER_ACTION_CREATE:
      include_once 'dennis_term_manager_action_create.inc';
      _dennis_term_manager_process_action_create($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_DELETE:
      include_once 'dennis_term_manager_action_delete.inc';
      _dennis_term_manager_process_action_delete($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_RENAME:
      include_once 'dennis_term_manager_action_rename.inc';
      _dennis_term_manager_process_action_rename($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_MERGE:
      _dennis_term_manager_process_action_merge($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT:
      include_once 'dennis_term_manager_action_move_parent.inc';
      _dennis_term_manager_process_action_move_parent($data);
      break;

    default:
      // Invalid Action.
      drupal_set_message(t("Invalid action in row @row", array(
        '@row' => $data['row'],
      )));
      break;
  }
}

/**
 * Helper to get vocabulary.
 *
 * @param : $vocabulary_name
 *   Vocabulary Name
 *
 * @return : $vocabulary
 *   array containing vocabulary
 */
function _dennis_term_manager_get_vocabulary($vocabulary_name) {
  // Get vocabulary by vocabulary name.
  $query = db_select('taxonomy_vocabulary', 'tv');
  $query->fields('tv', array(
    'machine_name',
    'vid',
  ));
  $query->condition('tv.name', $vocabulary_name, '=');
  $vocabulary = $query->execute()->fetchObject();
  return $vocabulary;
}

function dennis_term_manager_debug() {
  $file_path = 'public://sample_itpro_taxonomy_mapping1.csv';
  $options = array(
    'file_path' => $file_path,
    'start' => 1,
    'end' => 99999999999,
  );

  $temp = array();
  dennis_term_manager_csv_process($options, $temp);
}

/**
 * Helper to retrieve nodes associated with Term ID.
 *
 * @param : $tid
 *   Taxonomy Term ID.
 *   
 * @return array 
 *   List of nodes.
 */
function _dennis_term_manager_get_associated_nodes($tid) {
  // Get nodes from taxonomy_index using target term tid.
  $query = db_select('taxonomy_index', 'ti');
  $query->fields('ti', array(
    'nid',
  ));
  $query->condition('ti.tid', $tid, '=');
  $nodes = $query->execute()->fetchAll();
  return $nodes;
}

/**
 * Helper to get term ID.
 *
 * @param : $term_name
 *   Taxonomy Term Name
 * @param : $vocabulary_machine_name
 *   Vocabulary Machine Name
 *   
 * @return int 
 *   Taxonomy Term ID or false in case not found
 */
function _dennis_term_manager_get_tid($term_name, $vocabulary_machine_name) {
  $term_name = _dennis_term_manager_decode_specific_chars($term_name);
  if ($term = taxonomy_get_term_by_name($term_name, $vocabulary_machine_name)) {
    $first_term = array_values($term);
    return $first_term[0]->tid;
  }
}

/**
 * Helper to check if source term is the parent of target term.
 *
 * @param int $target_term_id 
 *   Taxonomy Term id
 * @param int $term_id
 *   Taxonomy Term Id
 */
function _dennis_term_manager_term_is_parent($target_term_id, $term_id) {
  $ancestors = taxonomy_get_parents_all($target_term_id);
  // If there are no parents, it's already level 1 term.
  if (empty($ancestors)) {
    return TRUE;
  }
  // Overwise check the term for not beeing checked term itself.
  else {
    foreach ($ancestors as $value) {
      if ($term_id == $value->tid) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Helper to write errors in report file.
 *
 * @param: $file_name
 *   URI of file
 * @param: $error_message
 *   Error Message.
 */
function _dennis_term_manager_write_report($file_name, $error_message) {
  if (($report_handle = fopen($file_name, "a")) != FALSE) {
    fwrite($report_handle, $error_message . PHP_EOL);
    fclose($report_handle);
  }
  else {
    // Report on watchdog.
    watchdog('DENNIS_TERM_MANAGER', t('Not able to write in report file. error %message'), array(
      '%message' => $error_message,
    ));
  }
}

/**
 * Helper function, to decode encoded string.
 *
 * We don't want to decode all the string, so let's take in consideration
 * encoded chars.
 */
function _dennis_term_manager_decode_specific_chars($string) {
  return str_replace('&amp;', '&', $string);
}

/**
 * CSV/TSV files should always have these columns.
 */
function dennis_term_manager_default_columns() {
  return array(
    'vocabulary_name',
    'term_name',
    'node_count',
    'parent_term',
    'action',
    'target',
    'new_name',
  );
}
