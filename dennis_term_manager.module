<?php
/**
 * @file
 * Module file Dennis Term Manager. 
 */

include_once 'dennis_term_manager_action_merge.inc';

define('DENNIS_TERM_MANAGER_ACTION_CREATE', 'create');
define('DENNIS_TERM_MANAGER_ACTION_DELETE', 'delete');
define('DENNIS_TERM_MANAGER_ACTION_MERGE', 'merge');
define('DENNIS_TERM_MANAGER_ACTION_RENAME', 'rename');
define('DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT', 'move parent');
define('DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT_FOR_MERGE', 'move parent merge');

/**
 * Implements hook_views_api().
 */
function dennis_term_manager_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'dennis_term_manager')
  );
}

/**
 * Implements hook_permission().
 */
function dennis_term_manager_permission() {
  return array(
    'administer dennis term manager' => array(
      'title' => t('Administer term manager'),
      'description' => t('Manage Dennis taxonomy terms CSV bulk operation'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dennis_term_manager_menu() {
  $items = array();
  $items['admin/structure/taxonomy/term_manager'] = array(
    'title' => 'Term Manager',
    'description' => 'Manage bulk taxonomy term operation via CSV file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'dennis_term_manager_form',
    ),
    'access arguments' => array(
      'administer dennis term manager',
    ),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function dennis_term_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/taxonomy/term_manager':
    case 'admin/help#dennis_term_manager':
      $output = '';
      $output .= '<div class="import-notes">';
      $output .= '<span>' . t('Make sure the file is in CSV or TSV format. And Columns must be in following order. First line of the file must contain a header.') . '</span>';
      $output .= '<table><tr>';
      $output .= '<td>Vocabulary</td>';
      $output .= '<td>Term name</td>';
      $output .= '<td>Related Nodes Number</td>';
      $output .= '<td>Parent Term</td>';
      $output .= '<td>Parent Vocabulary</td>';
      $output .= '<td>Action</td>';
      $output .= '<td>Target</td>';
      $output .= '<td>New Name</td>';
      $output .= '</tr></table>';
      $output .= '</div>';
      return $output;
  }
}

/**
 * Dennis Term Manager Form.
 */
function dennis_term_manager_form($form, &$form_state) {
  $form = array();

  // @todo : change storage to private.
  $form['csv_file'] = array(
    '#title' => t('Import'),
    '#type' => 'managed_file',
    '#description' => t('The CSV file to be processed.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array(
        'csv',
        'tsv',
      ),
    ),
    '#upload_location' => 'public://',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#suffix' => '<span> ' . t('Click the "Upload" button to process the file.') . '</span>',
  );
  $form['from'] = array(
    '#type' => 'item',
    '#prefix' => '<div><br /></div>',
    '#title' => t('Report'),
    '#markup' => views_embed_view('csv_report'),
  );

  return $form;
}

/**
 * Implements hook_views_pre_render().
 *
 * Modify the filename and file uri accordingly to generated file.
 */
function dennis_term_manager_views_pre_render(&$view) {
  if ($view->name == 'csv_report') {
    foreach ($view->result as $result) {
      $report_file_name = preg_replace("/[.](.*)/", ".txt", $result->file_managed_filename);
      $report_file_uri = preg_replace("/[.](.*)/", ".txt", $result->file_managed_uri);
      $result->file_managed_filename = $report_file_name;
      $result->file_managed_uri = $report_file_uri;
    }
  }
}

/**
 * Callback function for form submission.
 *
 * @param object $form
 *   Form Object
 * @param object $form_state
 *   Form State
 */
function dennis_term_manager_form_submit(&$form, &$form_state) {
  // Load the file.
  $file = file_load($form_state['values']['csv_file']);
  if (!$file) {
    drupal_set_message(t('file not found'));
  }
  else {
    // Add file usage.
    file_usage_add($file, 'dennis_term_manager',
     'dennis_term_manager_csv_file', 1);

    // Process the file.
    dennis_term_manager_csv_process($file->uri);
  }
}

/**
 * Process csv file and pass each row to cron queue.
 *
 * @param: $uri
 *   URL of CSV file
 */
function dennis_term_manager_csv_process($uri) {
  global $user;
  
  $file_path = drupal_realpath($uri);
  // Get current logged in user id.
  $user_id = $user->uid ? $user->uid : '';
  // Get the que to handle the.
  $q = DrupalQueue::get('dennis_term_manager_queue');

  if (file_exists($file_path)) {
    $row = 0;
    // Get the file content.
    if (($handle = fopen($file_path, "r")) !== FALSE) {

      // Create file for reporting error.
      // Use the same file name and change extenstion.
      $report_file_name = preg_replace("/[.](.*)/", ".txt", $file_path);

      if (($report_handle = fopen($report_file_name, "w")) !== FALSE) {

        while (($data = fgetcsv($handle, 1000, "\t")) !== FALSE) {
          // Set variable for each column.
          $vocabulary_name = isset($data[0]) ? check_plain($data[0]) : "";
          $term_name = isset($data[1]) ? check_plain($data[1]) : "";
          $related_nodes = isset($data[2]) ? check_plain($data[2]) : "";
          $parent_term = isset($data[3]) ? check_plain($data[3]) : "";
          $parent_vocabulary = isset($data[4]) ? check_plain($data[4]) : "";
          $action = isset($data[5]) ? check_plain($data[5]) : "";
          $target = isset($data[6]) ? check_plain($data[6]) : "";
          $new_name = isset($data[7]) ? check_plain($data[7]) : "";
          $row++;
          // Skip the header row.
          if ($row <= 1) {
            continue 1;
          }

          // Array containing parameters from the CSV.
          $parameters = array(
            'vocabulary_name' => $vocabulary_name,
            'term_name' => $term_name,
            'related_nodes' => $related_nodes,
            'parent_term' => $parent_term,
            'parent_vocabulary' => $parent_vocabulary,
            'action' => strtolower(trim($action)),
            'target' => $target,
            'new_name' => $new_name,
            'row' => $row,
            'user_id' => $user_id,
          );

          $data = array(
            'action' => $action,
            'row' => $row,
            'uid' => $user_id,
            'report_filename' => $report_file_name,
          );

          if ($vocabulary = _dennis_term_manager_get_vocabulary($parameters['vocabulary_name'])) {
            $data['vocabulary_id'] = $vocabulary->vid;
            if ($parameters['action'] != DENNIS_TERM_MANAGER_ACTION_CREATE) {
              // Get source tid.
              if ($source_tid = _dennis_term_manager_get_tid($parameters['term_name'], $vocabulary->machine_name)) {
                $data['source_tid'] = $source_tid;
              }
              else {
                drupal_set_message(t("Source term '@term_name' does not exist in vocabulary '@vocab'", array(
                  '@term_name' => $parameters['term_name'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 1;
              }
            }
            // Parse target term name.
            $target_term_name = '';
            preg_match("/>->[ ]?+(.*)/", decode_entities($parameters['target']), $matches);
            if (isset($matches[1])) {
              $target_term_name = $matches[1];
            }
          }
          else {
            drupal_set_message(t("There is no vocabulary @vocab exists in row @row", array(
              '@row' => $parameters['row'],
              '@vocab' => $parameters['vocabulary_name'],
            )));
            continue 1;
          }

          switch ($parameters['action']) {
            case DENNIS_TERM_MANAGER_ACTION_MERGE:
              // Get Target tid.
              if ($target_tid = _dennis_term_manager_get_tid($target_term_name, $vocabulary->machine_name)) {
                $data['target_tid'] = $target_tid;
              }
              else {
                drupal_set_message(t("Target term '@target' does not exist in vocabulary '@vocab'", array(
                  '@target' => $parameters['target'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 2;
              }
              // Get all nodes with target term reference.
              $nodes = _dennis_term_manager_get_associated_nodes($target_tid);
              if (!empty($nodes)) {
                // Find all child terms of target term.
                $children = taxonomy_get_children($target_tid);
                if (!empty($children)) {
                  foreach ($children as $child) {
                    // Change parent of each child term to source term.
                    $data['moving_parent_tid'] = $data['source_tid'];
                    $data['moving_child_tid'] = $child->tid;
                    $data['action'] = DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT_FOR_MERGE;

                    // Push each "merge move parent" action into the queue.
                    $q->createItem($data);
                  }
                }
              }
              // Reset action to merge.
              $data['action'] = DENNIS_TERM_MANAGER_ACTION_MERGE;
              // Create queue for each node.
              foreach ($nodes as $node) {
                $data['nid'] = $node->nid;
                // Queue item for Merge action.
                $q->createItem($data);
              }
              unset($data['nid']);
              // Change action to delete after Pushing nodes into the queue.
              $data['action'] = DENNIS_TERM_MANAGER_ACTION_DELETE;
              $data['term_name'] = $target_term_name;
              $data['source_tid'] = $target_tid;
              break;

            case DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT:
              // Check parent term.
              if (empty($parameters['parent_term'])) {
                drupal_set_message(t("Parent Term is empty in row @row", array(
                  '@row' => $data['row'],
                )));
                continue 2;
              }
              // Check target and source terms belongs to same vocabulary.
              if (!_dennis_term_manager_compare_vids($parameters['parent_vocabulary'], $vocabulary->vid)) {
                drupal_set_message(t("Target and Source term vocabulary is not same in row @row", array(
                  '@row' => $data['row'],
                )));
                continue 2;
              }
              $data['parent_term'] = $parameters['parent_term'];
              // Get Target tid.
              if ($target_tid = _dennis_term_manager_get_tid($parameters['parent_term'], $vocabulary->machine_name)) {
                $data['target_tid'] = $target_tid;
              }
              else {
                drupal_set_message(t("Target term '@target' does not exist in vocabulary '@vocab'", array(
                  '@target' => $parameters['target'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 2;
              }
              // Validate parent term if it is not child or source term.
              if (!_dennis_term_manager_term_is_parent($data['target_tid'], $data['source_tid'])) {
                drupal_set_message(t("Parent can not be moved. Because Term @parent_term is child of source term @term_name", array(
                  '@parent_term' => $data['parent_term'],
                  '@term_name' => $parameters['term_name'],
                )));
              }
              break;

            case DENNIS_TERM_MANAGER_ACTION_CREATE:
              // If parent term is specidied, check if this term exist.
              $parent_term = _dennis_term_manager_get_tid($parameters['parent_term'], $vocabulary->machine_name);
              if ($parameters['parent_term'] && empty($parent_term)) {
                drupal_set_message(t("Parent term '@parent_term' does not exist in vocabulary '@vocab'", array(
                  '@parent_term' => $parameters['parent_term'],
                  '@vocab' => $parameters['vocabulary_name'],
                )));
                continue 2;
              }

              $data['parent_term'] = $parameters['parent_term'];
              $data['term_name'] = $parameters['term_name'];
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              break;

            case DENNIS_TERM_MANAGER_ACTION_DELETE:
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              $data['term_name'] = $parameters['term_name'];
              break;

            case DENNIS_TERM_MANAGER_ACTION_RENAME:
              $data['term_name'] = $parameters['term_name'];
              $data['new_name'] = $parameters['new_name'];
              $data['vocabulary_machine_name'] = $vocabulary->machine_name;
              break;

            default:
              continue 2;
          }
          $q->createItem($data);
        }
      }
      else {
        drupal_set_message('report file cannot be created');
      }
    }
    fclose($handle);
  }
  else {
    drupal_set_message(t("File not found @file", array(
      '@file' => $file_path,
    )));
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function dennis_term_manager_cron_queue_info() {
  $queues['dennis_term_manager_queue'] = array(
    'worker callback' => 'dennis_term_manager_process_queue_item',
    'time' => 60,
  );
  return $queues;
}

/**
 * Process the queue of terms, if any. Does what drupal_cron_run() does.
 *
 * @see drupal_cron_run()
 * 
 * @param int $max_time
 *   No of seconds
 */
function dennis_term_manager_process_queue($max_time = 15) {
  $end = time() + $max_time;
  $queue = DrupalQueue::get('dennis_term_manager_queue');
  while (time() < $end && ($item = $queue->claimItem())) {
    dennis_term_manager_process_queue_item($item->data);
    $queue->deleteItem($item);
  }
}

/**
 * Perform action on each queue item.
 * 
 * @param array $data
 *   An array containing source and target taxonomy term data
 *   
 */
function dennis_term_manager_process_queue_item($data) {
  // Process each row against their action column and validate their data.
  switch (strtolower($data['action'])) {
    case DENNIS_TERM_MANAGER_ACTION_CREATE:
      include_once 'dennis_term_manager_action_create.inc';
      _dennis_term_manager_process_action_create($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_DELETE:
      include_once 'dennis_term_manager_action_delete.inc';
      _dennis_term_manager_process_action_delete($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_RENAME:
      include_once 'dennis_term_manager_action_rename.inc';
      _dennis_term_manager_process_action_rename($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_MERGE:
      _dennis_term_manager_process_action_merge($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT:
      include_once 'dennis_term_manager_action_move_parent.inc';
      _dennis_term_manager_process_action_move_parent($data);
      break;

    case DENNIS_TERM_MANAGER_ACTION_MOVE_PARENT_FOR_MERGE:
      include_once 'dennis_term_manager_action_move_parent_merge.inc';
      _dennis_term_manager_process_action_move_parent_for_merge($data);
      break;

    default:
      // Invalid Action.
      drupal_set_message(t("Invalid action in row @row", array(
        '@row' => $data['row'],
      )));
      break;
  }
}

/**
 * Helper to get vocabulary.
 *
 * @param : $vocabulary_name
 *   Vocabulary Name
 *
 * @return : $vocabulary
 *   array containing vocabulary
 */
function _dennis_term_manager_get_vocabulary($vocabulary_name) {
  // Get vocabulary by vocabulary name.
  $query = db_select('taxonomy_vocabulary', 'tv');
  $query->fields('tv', array(
    'machine_name',
    'vid',
  ));
  $query->condition('tv.name', $vocabulary_name, '=');
  $vocabulary = $query->execute()->fetchObject();
  return $vocabulary;
}

function dennis_term_manager_debug() {
  $file_path = 'public://sample_itpro_taxonomy_mapping1.csv';
  dennis_term_manager_csv_process($file_path);
}

/**
 * Helper to retrieve nodes associated with Term ID.
 *
 * @param : $tid
 *   Taxonomy Term ID.
 *   
 * @return array 
 *   List of nodes.
 */
function _dennis_term_manager_get_associated_nodes($tid) {
  // Get nodes from taxonomy_index using target term tid.
  $query = db_select('taxonomy_index', 'ti');
  $query->fields('ti', array(
    'nid',
  ));
  $query->condition('ti.tid', $tid, '=');
  $nodes = $query->execute()->fetchAll();
  return $nodes;
}

/**
 * Helper to get term ID.
 *
 * @param : $term_name
 *   Taxonomy Term Name
 * @param : $vocabulary_machine_name
 *   Vocabulary Machine Name
 *   
 * @return int 
 *   Taxonomy Term ID or false in case not found
 */
function _dennis_term_manager_get_tid($term_name, $vocabulary_machine_name) {
  // We don't want to decode all the string, so let's take in consideration
  // "&" encoded char.
  $term_name = str_replace('&amp;', '&', $term_name);
  if ($term = taxonomy_get_term_by_name($term_name, $vocabulary_machine_name)) {
    $first_term = array_values($term);
    return $first_term[0]->tid;
  }
}

/**
 * Helper to check target and source term belongs to same vocabulary.
 *
 * @param : $target_vocabulary_name
 *   Taxonomy vocabulary Name
 * @param : $vocabulary_id
 *   Vocabulary ID
 *
 *
 * @return : boolean
 *   true if matches, false otherwise
 */
function _dennis_term_manager_compare_vids($target_vocabulary_name, $vocabulary_id) {
  // Get target vocabulary id.
  if (!$target_vocabulary = _dennis_term_manager_get_vocabulary($target_vocabulary_name)) {
    return FALSE;
  }
  // Check target and source term belongs to same vocabulary.
  if ($vocabulary_id == $target_vocabulary->vid) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper to check if source term is the parent of target term.
 *
 * @param int $target_term_id 
 *   Taxonomy Term id
 * @param int $term_id
 *   Taxonomy Term Id
 */
function _dennis_term_manager_term_is_parent($target_term_id, $term_id) {
  $ancestors = taxonomy_get_parents_all($target_term_id);
  // If there are no parents, it's already level 1 term.
  if (empty($ancestors)) {
    return TRUE;
  }
  // Overwise check the term for not beeing checked term itself.
  else {
    foreach ($ancestors as $value) {
      if ($term_id == $value->tid) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Helper to write errors in report file.
 *
 * @param: $file_name
 *   URI of file
 * @param: $error_message
 *   Error Message.
 */
function _dennis_term_manager_write_report($file_name, $error_message) {
  if (($report_handle = fopen($file_name, "a")) != FALSE) {
    fwrite($report_handle, $error_message . PHP_EOL);
    fclose($report_handle);
  }
  else {
    // Report on watchdog.
    watchdog('DENNIS_TERM_MANAGER', t('Not able to write in report file. error %message'), array(
      '%message' => $error_message,
    ));
  }
}
