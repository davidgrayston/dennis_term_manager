<?php
/**
 * @file
 * Module file Dennis Term Manager.
 */

define ('ACTION_CREATE', 'create');
define ('ACTION_DELETE', 'delete');
define ('ACTION_MERGE', 'merge');
define ('ACTION_RENAME', 'rename');
define ('ACTION_MOVE_PARENT', 'move parent');

/**
 * Implement hook_permission().
 */
function dennis_term_manager_permission() {
  return array(
    'administer dennis term manager' => array(
      'title' => t('Administer term manager'),
      'description' => t('Manage Dennis taxonomy terms CSV bulk operation'),
    ),
  );
}

/**
 * Implement hook_menu().
 */
function dennis_term_manager_menu() {
  $items = array();
  $items['admin/structure/taxonomy/term_manager'] = array(
    'title' => 'Term Manager',
    'description' => 'Manage bulk taxonomy term operation via CSV file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dennis_term_manager_form'),
    'access arguments' => array('administer dennis term manager'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function dennis_term_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/taxonomy/term_manager':
    case 'admin/help#dennis_term_manager':
      $output = '';
      $output .= '<div class="import-notes">';
      $output .= '<span>' . t('Make sure the file is in CSV or TSV format. And Columns must be in following order. First line of the file must contain a header.') . '</span>';
      $output .= '<table><tr>';
      $output .= '<td>Vocabulary</td>';
      $output .= '<td>Term name</td>';
      $output .= '<td>Related Nodes Number</td>';
      $output .= '<td>Parent Term</td>';
      $output .= '<td>Parent Vocabulary</td>';
      $output .= '<td>Action</td>';
      $output .= '<td>Target</td>';
      $output .= '<td>New Name</td>';
      $output .= '</tr></table>';
      $output .= '</div>';
      return $output;
  }
}

/**
 * Dennis Term Manager Form.
 */
function dennis_term_manager_form($form, &$form_state) {
  $form = array();

  // #managed_file FAPI
  // @todo : change storage to private
  $form['csv_file'] = array(
    '#title' => t('Import'),
    '#type' => 'managed_file',
    '#description' => t('The CSV file to be processed.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv', 'tsv'),
    ),
    '#upload_location' => 'public://term_csv/'
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#suffix' => '<span> ' . t('Click the "Upload" button to process the file.') . '</span>',
  );

  return $form;
}

/**
 * Call back function for form submission.
 */
function dennis_term_manager_form_submit(&$form, &$form_state) {
  // Load the file.
  $file = file_load($form_state['values']['csv_file']);
  // Change status to permanent.
  $file->status = FILE_EXISTS_REPLACE;
  $file_path = $file->uri;

  // Save.
  $uploaded = file_save($file);
  if ($uploaded == TRUE) {
    drupal_set_message(t('The file has been uploaded.'));
  }
  else {
    drupal_set_message(t('The file could not be uploaded. Please contact the site administrator.'), 'error');
  }

  // Process the file.
  dennis_term_manager_csv_process($file_path);
}

/**
 * Process csv file and pass each row to cron queue.
 */
function dennis_term_manager_csv_process($uri) {
  $file_path = drupal_realpath($uri);

  // Get current logged in user
  $user_id = $GLOBALS["user"]->uid ? $GLOBALS["user"]->uid : '';
  // Get the que to handle the
  $q = DrupalQueue::get('dennis_term_manager_queue');


  if (file_exists($file_path)) {
    $row = 0;
    $errors = array();
    // Get the file content
    if (($handle = fopen($file_path, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, "\t")) !== FALSE) {
        // Set variable for each column
        $vocabulary_name = isset($data[0]) ? check_plain($data[0]) : "";
        $term_name = isset($data[1]) ? check_plain($data[1]) : "";
        $related_nodes = isset($data[2]) ? check_plain($data[2]) : "";
        $parent_term = isset($data[3]) ? check_plain($data[3]) : "";
        $parent_vocabulary = isset($data[4]) ? check_plain($data[4]) : "";
        $action = isset($data[5]) ? check_plain($data[5]) : "";
        $target = isset($data[6]) ? check_plain($data[6]) : "";
        $new_name = isset($data[7]) ? check_plain($data[7]) : "";
        $row++;
        // Skip the header row
        if($row <= 1) {
          continue 1;
        }

        // Create array to be passed in Queue
        $filtered_data = array(
          'vocabulary_name' => $vocabulary_name,
          'term_name' => $term_name,
          'related_nodes' => $related_nodes,
          'parent_term' => $parent_term,
          'parent_vocabulary' => $parent_vocabulary,
          'action' => $action,
          'target' => $target,
          'new_name' => $new_name,
          'row_number' => $row,
          'user_id' => $user_id,
        );
        // Queue terms for various action
        $q->createItem($filtered_data);

        dpm($vocabulary_name, strtolower(trim($action)));
        return;
      }
      fclose($handle);
    }
  }
  else {
    drupal_set_message(t("File not found @file", array('@file' => $file_path)));
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function dennis_term_manager_cron_queue_info() {
  $queues['dennis_term_manager_queue'] = array(
    'worker callback' => 'dennis_term_manager_process_queue_item',
    'time' => 60,
  );
  return $queues;
}

/**
 * Process the queue of terms, if any.
 * Does what drupal_cron_run() does.
 * @see drupal_cron_run()
 */
function dennis_term_manager_process_queue($max_time = 15) {
  $end = time() + $max_time;
  $queue = DrupalQueue::get('dennis_term_manager_queue');
  while (time() < $end && ($item = $queue->claimItem())) {
    dennis_term_manager_process_queue_item($item->data);
    $queue->deleteItem($item);
  }
}

function dennis_term_manager_process_queue_item($data) {

  $vocabulary_name = $data['vocabulary_name'];
  $term_name = $data['term_name'];
  $related_nodes = $data['related_nodes'];
  $parent_term = $data['parent_term'];
  $parent_vocabulary = $data['parent_vocabulary'];
  $action = $data['action'];
  $target = $data['target'];
  $new_name = $data['new_name'];
  $row = $data['row_number'];
  $user_id = $data['user_id'];

  // Process each row against their action column and validate their data.
  switch (strtolower(trim($action))) {
    case ACTION_CREATE:
      // Check if vocabulary name exist.
      if (empty($vocabulary_name)) {
        drupal_set_message(t("vocabulary name does not exist in row @row", array('@row' => $row)));
        return;
      }
      // Get vocabulary by vocabulary name.
      $query = db_select('taxonomy_vocabulary', 'tv');
      $query->fields('tv', array('machine_name','vid'));
      $query->condition('tv.name', $vocabulary_name, '=');
      $vocabulary = $query->execute()->fetchAssoc();

      // Check if Vocabulary exist in database.
      if (!isset($vocabulary['machine_name']) || !isset($vocabulary['vid'])) {
        drupal_set_message(t("There is no vocabulary @vocab exists in database for create action on row @row", array('@row' => $row, '@vocab' => $vocabulary_name)));
      }
      // Check if Term already exist.
      $existing_term = taxonomy_get_term_by_name($term_name, $vocabulary['machine_name']);
      if (isset($existing_term)) {
        drupal_set_message(t("Term '@term_name' already exist in vocabulary '@vocab'", array('@term_name' => $term_name, '@vocab' => $vocabulary_name)));
        return;
      }
      // Create new term.
      $term = new stdClass();
      $term->name = $term_name;
      $term->vid = $vocabulary['vid'];
      $term->vocabulary_machine_name = $vocabulary['machine_name'];
      taxonomy_term_save($term);
      if(!isset($term->tid)) {
        drupal_set_message(t('Not able to create term @term_name in row @row', array('@term_name' => $term_name, '@row' => $row)));
      }
      else {
        drupal_set_message(t("Term '@term_name' with TID '@tid' created", array('@term_name' => $term->name, '@tid' => $term->tid)));
      }
      break;
    case ACTION_DELETE:
      // Validate vocabulary column.
      if (empty($vocabulary_name)) {
        drupal_set_message(t("Vocabulary name is empty in row @row", array('@row' => $row)));
      }
      // Validate term name.
      if (empty($term_name)) {
        drupal_set_message(t("Term name not valid in row @row", array('@row' => $row)));
      }
      // Check if related node doesnt exist
      if ($related_nodes != 0) {
        drupal_set_message(t("There are related nodes exists for @term actioned to be deleted in row @row", array('@term' => $term_name, '@row' => $row)));
      }
      break;
    case ACTION_RENAME:
      //check if vocab name exist
      if (!isset($vocabulary_name)) {
        drupal_set_message(t("Vocabulary name not valid in row @row", array('@row' => $row)));
      }
      //check if term name exist
      if (!isset($term_name)) {
        drupal_set_message(t("Term name not valid in row @row", array('@row' => $row)));
      }
      //check if New term name exists
      if (!isset($new_name)) {
        drupal_set_message(t("New Name for term @term is not valid in row @row", array('@term' => $term_name, '@row' => $row)));
      }
      break;
    case ACTION_MERGE:
      $target_term = explode(">->", $target);
      //check if target term exists.
      if (count($target_term) <= 1) {
        drupal_set_message(t("Target Term Name is not valid in row @row", array('@row' => $row)));
      }
      //check if vocab name exists.
      if (!isset($vocabulary_name)) {
        drupal_set_message(t("Vocabulary name not valid in row @row", array('@row' => $row)));
      }
      //check if term name exists.
      if (!isset($term_name)) {
        drupal_set_message(t("Term name not valid in row @row", array('@row' => $row)));
      }
      break;
    case ACTION_MOVE_PARENT:
      //check if vocab name exists.
      if (!isset($vocabulary_name)) {
        drupal_set_message(t("Vocabulary name not valid in row @row", array('@row' => $row)));
      }
      //check if term name exists.
      if (!isset($term_name)) {
        drupal_set_message(t("Term name not valid in row @row", array('@row' => $row)));
      }
      //check if parent term exists
      if ( !isset($parent_term)) {
        drupal_set_message(t("Parent Term is not valid in row @row", array('@row' => $row)));
      }
      //check if parent vocab exists.
      if (  !isset($parent_vocabulary)) {
        drupal_set_message(t("Parent Vocabulary is not valid in row @row", array('@row' => $row)));
      }
      break;
    default:
      // Invalid Action.
      drupal_set_message(t("Invalid action in row @row", array('@row' => $row)));
      break;
  }
}

function dennis_term_manager_debug() {
  $file_path = 'public://sample_itpro_taxonomy_mapping.csv';
  dennis_term_manager_csv_process($file_path);
}